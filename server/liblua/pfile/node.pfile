
// 统一所有数据类型的使用
typedef char 						int8;
typedef short 						int16;
typedef int 						int32;
typedef long long int				int64;
typedef unsigned char 				uint8;
typedef unsigned short  			uint16;
typedef unsigned int    			uint32;
typedef unsigned long long int  	uint64;

#define COMMAND_CLIENT_REQUEST 1
#define COMMAND_HTTP_REQUEST 2
#define COMMAND_NODE_REQUEST 3
#define COMMAND_NODE_RESPONSE 4
#define COMMAND_NODE_ERROR 5
#define COMMAND_REQUEST_TIMEOUT 6
#define COMMAND_BROADCAST 7

class Node
{
    uint32 startTimer(uint32 callbackID, int64 timeCount);			        // 开始一个计时器
    void removeTimer(uint32 handle);								        // 移除计时器
    void changeTimer(uint32 handle, int64 timeCount);				        // 更改计时器的时间
    int64 getTimerLeft(uint32 handle);									    // 获取计时器剩余时间

	bool broadcast(uint32 desType, uint32 message, uint32 uid, const char* ptr, uint32 length);
	bool sendRequest(uint32 desType, uint32 desID, uint32 message, uint32 callbackID, uint32 uid, const char* ptr, uint32 length);
	bool sendResponse(uint32 desType, uint32 desID, uint32 message, uint32 callbackID, uint32 uid, const char* ptr, uint32 length);
	bool responseConnect(uint32 desType, uint32 desID, uint32 message, uint32 callbackID, uint32 uid, const char* ptr, uint32 length, uint32 connType, uint32 connHandle);
	const char* getConnectIP(uint32 connType, uint32 connHandle);
	bool closeConnect(uint32 connType, uint32 connHandle);

	uint32 hash(const char* str, uint32 length);
	void encrypt(const char* str, uint32 length, std::string& result);
	void decrypt(const char* str, uint32 length, std::string& result);

	uint32 getNodeID(void){ return m_nodeID; }
	void setNodeID(uint32 nodeID){ m_nodeID = nodeID; }
	uint32 getModuleType(void) const;
	uint32 getModuleIndex(void) const;
	uint32 getModuleHandle(void) const;
	void log(const char* str);
};

